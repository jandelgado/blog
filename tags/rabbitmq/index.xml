<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rabbitmq on JDBlog</title><link>https://jandelgado.github.io/blog/tags/rabbitmq/</link><description>Recent content in Rabbitmq on JDBlog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 21 Jun 2023 22:23:45 +0100</lastBuildDate><atom:link href="https://jandelgado.github.io/blog/tags/rabbitmq/index.xml" rel="self" type="application/rss+xml"/><item><title>Porting a Go CLI tool to Web Assembly</title><link>https://jandelgado.github.io/blog/posts/rabtap-wasm/</link><pubDate>Wed, 21 Jun 2023 22:23:45 +0100</pubDate><guid>https://jandelgado.github.io/blog/posts/rabtap-wasm/</guid><description>In this blog post I&amp;rsquo;ll show how to run a golang command line application locally with a web assembly (WASM) runtime.
Background The current release candidate of go 1.21 adds an experimental port of the Web Assembly System Interface (WASI). While the go compiler could compile to WASM before, only the Javascript target was supported, which was targeting browsers.
WASI enables a WASM application to access operating-system features like files and sockets, while being independet of browsers.</description></item></channel></rss>